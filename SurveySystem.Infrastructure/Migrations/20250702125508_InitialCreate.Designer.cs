// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveySystem.Infrastructure.Persistence;

#nullable disable

namespace SurveySystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250702125508_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SurveySystem.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            QuestionId = new Guid("a1b2c3d4-e5f6-7788-9900-aabbccddeeff"),
                            Text = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            QuestionId = new Guid("a1b2c3d4-e5f6-7788-9900-aabbccddeeff"),
                            Text = "Moscow Region"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            QuestionId = new Guid("a1b2c3d4-e5f6-7788-9900-aabbccddeeff"),
                            Text = "Other region"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            QuestionId = new Guid("ffeeddcc-bbaa-0099-8877-f6e5d4c3b2a1"),
                            Text = "Yes"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            QuestionId = new Guid("ffeeddcc-bbaa-0099-8877-f6e5d4c3b2a1"),
                            Text = "No"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            QuestionId = new Guid("b2c3d4e5-f6a7-8899-0011-aabbccddeeff"),
                            Text = "Developer"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            QuestionId = new Guid("b2c3d4e5-f6a7-8899-0011-aabbccddeeff"),
                            Text = "QA Engineer"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            QuestionId = new Guid("b2c3d4e5-f6a7-8899-0011-aabbccddeeff"),
                            Text = "Manager"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            QuestionId = new Guid("d3e4f5a6-b7c8-9900-1122-ccddeeff0011"),
                            Text = "1 (Poor)"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            QuestionId = new Guid("d3e4f5a6-b7c8-9900-1122-ccddeeff0011"),
                            Text = "3 (Average)"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            QuestionId = new Guid("d3e4f5a6-b7c8-9900-1122-ccddeeff0011"),
                            Text = "5 (Excellent)"
                        });
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CompletedAt = new DateTime(2024, 3, 1, 10, 5, 0, 0, DateTimeKind.Utc),
                            StartedAt = new DateTime(2024, 3, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            SurveyId = new Guid("1f9a3e42-1c7b-4b8f-8e4a-3e8a1d7f2b1c")
                        });
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId", "Order")
                        .IsUnique();

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7788-9900-aabbccddeeff"),
                            Order = 1,
                            SurveyId = new Guid("1f9a3e42-1c7b-4b8f-8e4a-3e8a1d7f2b1c"),
                            Text = "Which region do you live in?"
                        },
                        new
                        {
                            Id = new Guid("ffeeddcc-bbaa-0099-8877-f6e5d4c3b2a1"),
                            Order = 2,
                            SurveyId = new Guid("1f9a3e42-1c7b-4b8f-8e4a-3e8a1d7f2b1c"),
                            Text = "Are you satisfied with your region?"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8899-0011-aabbccddeeff"),
                            Order = 1,
                            SurveyId = new Guid("c5e8b9f0-3a2d-4b1c-8e6f-0a9d8c7b6a5e"),
                            Text = "What is your role?"
                        },
                        new
                        {
                            Id = new Guid("d3e4f5a6-b7c8-9900-1122-ccddeeff0011"),
                            Order = 2,
                            SurveyId = new Guid("c5e8b9f0-3a2d-4b1c-8e6f-0a9d8c7b6a5e"),
                            Text = "How would you rate your work-life balance (1 to 5)?"
                        });
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SelectedAnswerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Results");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CreatedAt = new DateTime(2024, 3, 1, 10, 2, 0, 0, DateTimeKind.Utc),
                            InterviewId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            QuestionId = new Guid("a1b2c3d4-e5f6-7788-9900-aabbccddeeff"),
                            SelectedAnswerId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("f2f2f2f2-f2f2-f2f2-f2f2-f2f2f2f2f2f2"),
                            CreatedAt = new DateTime(2024, 3, 1, 10, 4, 0, 0, DateTimeKind.Utc),
                            InterviewId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            QuestionId = new Guid("ffeeddcc-bbaa-0099-8877-f6e5d4c3b2a1"),
                            SelectedAnswerId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f9a3e42-1c7b-4b8f-8e4a-3e8a1d7f2b1c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Test Survey About Regions"
                        },
                        new
                        {
                            Id = new Guid("c5e8b9f0-3a2d-4b1c-8e6f-0a9d8c7b6a5e"),
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A short survey about your job.",
                            Title = "Work Satisfaction Survey"
                        });
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Answer", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Question", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Survey", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Result", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Interview", null)
                        .WithMany("Results")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Interview", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
